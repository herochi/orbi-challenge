// Code generated by MockGen. DO NOT EDIT.
// Source: github/herochi/orbi/service-a/application/notifier (interfaces: Notifier)

// Package Notifier_mock is a generated GoMock package.
package Notifier_mock

import (
	viewmodel "github/herochi/orbi/service-a/application/user/ports/viewmodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyServiceB mocks base method.
func (m *MockNotifier) NotifyServiceB(arg0 *viewmodel.UserVM) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyServiceB", arg0)
}

// NotifyServiceB indicates an expected call of NotifyServiceB.
func (mr *MockNotifierMockRecorder) NotifyServiceB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyServiceB", reflect.TypeOf((*MockNotifier)(nil).NotifyServiceB), arg0)
}
